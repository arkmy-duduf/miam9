name: Android APK (Flutter)

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  build-apk:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: app

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.0'
          channel: 'stable'
          cache: true

      - name: Ensure Android platform exists
        run: |
          if [ ! -d "android" ]; then
            flutter create . --platforms=android
          fi

      - name: Inject CAMERA permission in Manifest
        run: |
          MANIFEST="android/app/src/main/AndroidManifest.xml"
          if [ -f "$MANIFEST" ] && ! grep -q 'android.permission.CAMERA' "$MANIFEST"; then
            awk '1; /<manifest/ && !x {print "    <uses-permission android:name=\"android.permission.CAMERA\" />"; x=1}' "$MANIFEST" > "$MANIFEST.tmp" && mv "$MANIFEST.tmp" "$MANIFEST"
          fi

      - name: Flutter Pub Get
        run: flutter pub get

      - name: Build Debug APK
        run: flutter build apk --debug

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: app/build/app/outputs/flutter-apk/app-debug.apk

      - name: Build Split ABI APKs (release, unsigned if no secrets)
        run: flutter build apk --release --split-per-abi

      - name: Upload Split APKs
        uses: actions/upload-artifact@v4
        with:
          name: app-split-apks
          path: app/build/app/outputs/flutter-apk/*.apk

      - name: Build App Bundle (AAB)
        run: flutter build appbundle --release

      - name: Upload AAB
        uses: actions/upload-artifact@v4
        with:
          name: app-bundle-aab
          path: app/build/app/outputs/bundle/release/app-release.aab

  build-release-signed:
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: app

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.0'
          channel: 'stable'
          cache: true

      - name: Ensure Android platform exists
        run: |
          if [ ! -d "android" ]; then
            flutter create . --platforms=android
          fi

      - name: Inject CAMERA permission in Manifest
        run: |
          MANIFEST="android/app/src/main/AndroidManifest.xml"
          if [ -f "$MANIFEST" ] && ! grep -q 'android.permission.CAMERA' "$MANIFEST"; then
            awk '1; /<manifest/ && !x {print "    <uses-permission android:name=\"android.permission.CAMERA\" />"; x=1}' "$MANIFEST" > "$MANIFEST.tmp" && mv "$MANIFEST.tmp" "$MANIFEST"
          fi

      - name: Flutter Pub Get
        run: flutter pub get

      - name: Decode Keystore
        run: |
          mkdir -p android/app
          echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > android/app/upload-keystore.jks
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}

      - name: Create key.properties
        run: |
          cat > android/key.properties << 'EOF'
          storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          storeFile=upload-keystore.jks
          EOF

      - name: Build Release APK (signed)
        run: flutter build apk --release

      - name: Upload Release APK (signed)
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk-signed
          path: app/build/app/outputs/flutter-apk/app-release.apk

      - name: Build App Bundle (AAB signed)
        run: flutter build appbundle --release

      - name: Upload AAB (signed)
        uses: actions/upload-artifact@v4
        with:
          name: app-bundle-aab-signed
          path: app/build/app/outputs/bundle/release/app-release.aab
